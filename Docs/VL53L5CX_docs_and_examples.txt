Examples that shed a little more light on the meaning of frequency and other VL53L5CX attributes:

https://github.com/kriswiner/VL53L5CX

Arduino library for VL53L5CX.  Includes example for motion indicator use.  The little that I could see
in here is that motion indication does not seem to report where motion is; it only says that there is motion, hence
you might only want to read out data when motion is sensed.  It also has an example for multiple targets per zone, 
albeit I didn't find the example code to be very informative.

https://github.com/simondlevy/VL53L5

Sparkfun hookup guide:

https://learn.sparkfun.com/tutorials/qwiic-tof-imager---vl53l5cx-hookup-guide

ST web page for VL53L5CXL:

https://www.st.com/en/imaging-and-photonics-solutions/vl53l5cx.html

ST VL53L5CX User Manual:  Document number UM2884 is included in this repository.  This document explains a lot! Here
are some highlights:
	"ULD (Ultralight Driver)":  This is ST's library that works directly with their firmware.  The ULD is actually
		a set of files, as follows:
			vl53l5cx_api.h and _api.c (mandatory)
			vl53l5cx_buffers.h and _buffers.c (mandatory)
			vl53l5cx_plugin_detection_thresholds.h and .c (optional)
			vl53l5cx_motion_indicator.h and .c (optional)
			vl53l5cx_xtalk.h and .c (optional)
			platform.h and platform.c (mandatory)
		These files are all included in the sparkfun arduino library: lib/Sparkfun_VL53L5cx_Arduino_Library/src,
			albeit the .c files are renamed to .cpp	
		The ULD files are generic c files for use with any host platform.  It looks like Simon Levy adapted these
			ULD files for Arduino, and then Sparkfun added some structs and defined constants and used the lot
			of these to create their library.
		The optional files are only needed if the specific optional functionality is used in a project.
		NOTE: The Sparkfun library wraps most of the ULD functions described below and in this document. Use
		the Sparkfun library calls and not these lower level calls where Sparkfun calls are available.
		
	"Cross Talk (xtalk)":  Infrared light is internally reflected in the sensor due to the sensor cover filter and
		internal optics. This causes crosstalk (xtalk) which must be calibrated out.  NOTE: the module comes
		pre-calibrated for it's own cover and optics and xtalk re-calibration is NOT REQUIRED.  Re-calibration
		is only required if the module is protected by a cover glass.  See secion 3.2 for details.
		
	"Ranging Flow":  detailed in section 3.3.  Basically, any paramters that need to be changed on the module must
		be changed before ranging is started.  Ranging is started once (function: vl53l5cs_start_ranging() ).
		Thereafter, ranging is continuous at the chosen rate (frequency).  However, the host must check for new data
		available by the function: vl53l5cx_check_data_ready() or by processing the interrupt signal.  The function
		vl53l5cx_stop_ranging() may be used to stop the ranging (presumably to save power when not needed).
		
	"Initialization":  detailed in section 4.1.  Basically, must call vl53l5cx_init() before setting anything up or starting
		ranging.  The init() function downloads firmware to the module's onboard microcontroller (about 84 KB).
		
	"Resolution": detailed in section 4.3.  The module supports two resolutions: 4x4 and 8x8.  Default is 4x4.  the function:
		vl53l5cx_set_resolution() is used to change the resolution.  If resolution is changed, the ranging frequency
		may need to be changed afterwards because the max ranging frequency of 4x4 is 60 Hz and the max for 8x8 is 15 Hz.
		The default is 1 Hz, which is OK for both resolutions.
		
	"Ranging Frequency": detailed in section 4.4.  The function: vl53l5cx_set_ranging_frequency_hz()changes the frequency.
	
	"Ranging Mode": detailed in section 4.5.  There are two ranging modes: "continuous" and "automatic".  Continuous mode
		pre-sets integration time and is best to use for speed and accuracy.  Automatic mode allows
		integration time to be user specified and can result in lower power operation.  The function: 
		vl53l5cx_set_ranging_mode()is used to change the mode. A discussion of integration time and how it works is
		in section 4.6.
		
	"Power Modes": detailed in section 4.7.  There are two power modes: "Wake-up" and "Sleep".  In "wake-up" mode, the 
		device is in high power idle, awaiting instructions.  In "sleep" mode, the device is at low power and must
		be placed into "wake-up" to receive instructions.  The function: vl53l5cx_set_power_mode()is used to 
		change the mode. NOTE: the power mode cannot be changed while the device is ranging.  The function:  
		vl53l5cx_stop_ranging() is used to stop the ranging.
		
	"Sharpener": detailed in section 4.8.  The function: vl53l5cs_set_sharpener_percent() sharpens the edges between
		near and far objects.  The range is 0% to 99%; default is 5%.	
	
	Target Order": detailed in section 4.9; and "Multiple targets per zone": detailed in section 4.10.  The vl53l5cs
		can detect and report more than one target per zone, based upon a histogram analysis.  The order of reporting
		can be either "Closest" first, or it can be "Strongest first".  The function: vl53l5cs_set_target_order() selects
		which order is used (default is "strongest").  The vl53l5cs can detect and report up to 4 targets per zone (default
		is one target per zone).  The number of targets per zone cannot be changed in the ULD, it must be changed by the
		macro VL53L5CXNB_TARGET_PER_ZONE in the file "platform.h".
		
	"Xtalk margin": detailed in section 4.11. Crosstalk can happen because light bounces off of a cover glass.  The device come
		pre-calibrated for its internal structure and cover.  Xtalk margin need only be changed if an external cover glass is
		used in the product.  The package "vl53l5cx_plugin_xtalk.h/c" is used to recalibrate the device with a cover glass.
		
	"Detection thresholds": detailed in section 4.12.  This is not a feature of the standard package. The pluging package
		"vl53l5cx_plugin_detection_thresholds.h/c" is used to change this.  This package does not appear to change the
		ranging measurements in any way.  It does provide a means to change when an interrupt is generated by the device.
		
	"Motion indicator": detailed in section 4.13.  This is not a feature of the standard package. The pluging package
		"vl53l5cx_plugin_motion_indicator.h/c" is used to change this.  This package does not appear to change the
		ranging measurements in any way.  It does provide a means to change when an interrupt is generated by the device.

	Data Returned by the Device:  this is detailed in section 5 of the document.  By default, a wide range of data is returned
		with each ranging measurement; see section 5.1.  Target distance (for each zone) is only one of a host of values. By
		default, all of the data in section 5.1 is returned; however the defined constants listed in section 5.2 can be used
		to disable some data items from the results.
		
SUMMARY THOUGHTS AFTER READING THROUGH THE USER MANUAL:
		The following are my thoughts about operating the device for the purpose of detecting the location of the closest object
		to the sensor:
		- By and large, the defaults should be used.  The device may remain in high power mode and continuous ranging mode, as 
			power consumption is not an issue.
		- The default ranging frequency (1 Hz) might be adequate for this application. However, it can be raised (to up
			to 15 Hz for 8x8 resolution) if faster updates are needed (e.g. for realistic eye tracking).
		- The default 4x4 resolution should be changed to 8x8 before ranging is started. 8x8 resolution will yield a much
			finer eye tracking than would 4x4.
		- Polling vl53l5cx_check_data_ready() over the I2C bus would be best (no other connections needed).  However, the device's
			interrupt signal could be used to interrupt the host if polling is too burdensome.  If interrupts are used, I suggest
			that only an interupt indicating that a new frame of data is ready is needed.
		- The default crosstalk setting should be used (no extra cover glass is anticipated).
		- Detection thresholds and Motion detection only apply to interrupts and don't seem to be needed for this application.
		- It may or may not be advantageous to change the sharpener default.  Experimentation will be needed to ascertain this.
			For initial testing, leave the default.
		- One target per zone should be sufficient, and this is the default.  Since there is only one target per zone, 
			target order is not relevant.
			
	** We need to point the eyes to a target, and track the target as it moves.  
		*** What defines "the target"? I believe that the closest object to the sensor is the target.  
			Note that there may be multiple objects in the sensor's FOV and so the closest object will be 
			defined to be the object of interest.  Is this correct?
		*** Can we simply use the closest of the 8x8 ranges (at any time) to define where the target of interest is? Should
			we average some values to determine the exact point to aim at the target?  What is the effect of the sharpener
			on this operational algorithm?
		*** Do we need to explicitly detect motion of a particular target, or just use the closest value in any measurement 
			to track on?
		*** What happens if another target enters the FOV? Should we try and continue tracking the target that we are tracking,
			or should the eyes slew to the new atget if it is closer?  What happens if two targets move forward and backward
			within the sensor's FOV?  Should the eyes move back and forth between the two?  Eyes always to the closest one?
			Eyes move between various targets within some range zone?
		
		
ANALYSIS OF THE SPARKFUN LIBRARY FILES.  As mentioned above, the ST ULD functions are generic and the lbrary contains C++ wrappers
	for Arduino implemention.  Therefore, the ULD functions described in the User Manual (document UM2884) are not called directly.
	The library files have been analysed and here is a list of the functions that should be used, as needed, when operating
	the VL53L5CX device.
	
	*** LEFT OFF HERE ***
	
	*** LEFT OFF HERE ***
	